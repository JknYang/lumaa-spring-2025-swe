{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nexport const registerUser = async (username, password) => {\n  const response = await fetch(`${API_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  return response.json();\n};\nexport const loginUser = async (username, password) => {\n  const response = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  return response.json();\n};\nexport const getTasks = async token => {\n  const response = await fetch(`${API_URL}/tasks`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.json();\n};\nexport const createTask = async (token, title, description) => {\n  const response = await fetch(`${API_URL}/tasks`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      title,\n      description\n    })\n  });\n  return response.json();\n};\nexport const updateTask = async (token, id, data) => {\n  const response = await fetch(`${API_URL}/tasks/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n};\nexport const deleteTask = async (token, id) => {\n  const response = await fetch(`${API_URL}/tasks/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.json();\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","registerUser","username","password","response","fetch","method","headers","body","JSON","stringify","json","loginUser","getTasks","token","Authorization","createTask","title","description","updateTask","id","data","deleteTask"],"sources":["/Users/hallushination/Documents/lumaSpring2025/lumaa-spring-2025-swe/frontend/src/api/api.ts"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\n\nexport const registerUser = async (username: string, password: string) => {\n  const response = await fetch(`${API_URL}/auth/register`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password }),\n  });\n  return response.json();\n};\n\nexport const loginUser = async (username: string, password: string) => {\n  const response = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password }),\n  });\n  return response.json();\n};\n\nexport const getTasks = async (token: string) => {\n  const response = await fetch(`${API_URL}/tasks`, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  return response.json();\n};\n\nexport const createTask = async (token: string, title: string, description?: string) => {\n  const response = await fetch(`${API_URL}/tasks`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ title, description }),\n  });\n  return response.json();\n};\n\nexport const updateTask = async (token: string, id: number, data: any) => {\n  const response = await fetch(`${API_URL}/tasks/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(data),\n  });\n  return response.json();\n};\n\nexport const deleteTask = async (token: string, id: number) => {\n  const response = await fetch(`${API_URL}/tasks/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  return response.json();\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,QAAgB,KAAK;EACxE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,gBAAgB,EAAE;IACvDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOV,QAAgB,EAAEC,QAAgB,KAAK;EACrE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,aAAa,EAAE;IACpDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAME,QAAQ,GAAG,MAAOC,KAAa,IAAK;EAC/C,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,QAAQ,EAAE;IAC/CU,OAAO,EAAE;MAAEQ,aAAa,EAAE,UAAUD,KAAK;IAAG;EAC9C,CAAC,CAAC;EACF,OAAOV,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,MAAAA,CAAOF,KAAa,EAAEG,KAAa,EAAEC,WAAoB,KAAK;EACtF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,QAAQ,EAAE;IAC/CS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCQ,aAAa,EAAE,UAAUD,KAAK;IAChC,CAAC;IACDN,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEO,KAAK;MAAEC;IAAY,CAAC;EAC7C,CAAC,CAAC;EACF,OAAOd,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAG,MAAAA,CAAOL,KAAa,EAAEM,EAAU,EAAEC,IAAS,KAAK;EACxE,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,UAAUuB,EAAE,EAAE,EAAE;IACrDd,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCQ,aAAa,EAAE,UAAUD,KAAK;IAChC,CAAC;IACDN,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,IAAI;EAC3B,CAAC,CAAC;EACF,OAAOjB,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMW,UAAU,GAAG,MAAAA,CAAOR,KAAa,EAAEM,EAAU,KAAK;EAC7D,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,UAAUuB,EAAE,EAAE,EAAE;IACrDd,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACPQ,aAAa,EAAE,UAAUD,KAAK;IAChC;EACF,CAAC,CAAC;EACF,OAAOV,QAAQ,CAACO,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}